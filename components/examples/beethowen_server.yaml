substitutions:
  systemName: "beethowen-server2"

esphome:
  name: $systemName

external_components:
  - source:
      type: local
      path: ../../esphome_components/bthome/components
    # components: [ beethowen, beethowen_base, bthome_base ]

esp8266:
  board: d1_mini

api:

web_server:
  port: 80
  ota: false

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap: ## for some reason this is needed ??
    ssid: "$systemName"
    password: !secret wifi_password

# ota:
#   password: !secret ota_password
#   safe_mode: True

logger:
  level: debug

# light:
#   - platform: status_led
#     id: my_statusled
#     name: "${systemName} Status LED"
#     pin:
#       number: D4
#       inverted: yes

time:
  - platform: homeassistant
    id: my_time
    timezone: Europe/Berlin

beethowen_receiver:
  # dump: unmatched
  dump: all
  local_passkey: 0x1234
  # on_packet: # mac_address,
  #   - lambda: |-
  #       auto time_text = id(my_time).now().strftime("%Y-%m-%d %H:%M:%S");
  #       long long int time_ts = id(my_time).now().timestamp;
  #       id(lastupdate).publish_state(time_text);
  #       //id(lastupdate_ts).publish_state(time_ts);
  devices:
    - mac_address: 48:3F:DA:0C:97:18
      name_prefix: Beethowen TestDevice
      dump: all
    - mac_address: AA:BB:CC:DD:EE:FF
      name_prefix: Beethowen ABCDEF TestDevice
      dump: unmatched
      expected_remote_passkey: 0x2345

binary_sensor:
  - platform: beethowen_receiver
    mac_address: 48:3F:DA:0C:97:18
    sensors:
      - measurement_type: generic_boolean
        name: D6_gpio

sensor:
  - platform: beethowen_receiver
    mac_address: 48:3F:DA:0C:97:18
    sensors:
      - measurement_type: temperature
        name: Temperature
        # on_value:
        #   - lambda: |-
        #       id(remote_temperature).publish_state(x)
        on_value:
          - lambda: |-
              auto time_isvalid = id(my_time).now().is_valid();
              if (time_isvalid) {
                auto time_text = id(my_time).now().strftime("%Y-%m-%d %H:%M:%S");
                long long int time_ts = id(my_time).now().timestamp;
                id(lastupdate).publish_state(time_text);
                //id(lastupdate_ts).publish_state(time_ts);
              }
      - measurement_type: pressure
        name: Pressure

      - measurement_type: count_large
        name: Count
        unit_of_measurement: cycles
      - measurement_type: duration
        name: Cycle time
      - measurement_type: voltage
        name: Battery voltage
      - measurement_type: battery
        name: Battery level

  - platform: beethowen_receiver
    mac_address: AA:BB:CC:DD:EE:00
    sensors:
      - measurement_type: temperature
        name: Temperature

  # - platform: template
  #   name: ${systemName} WIFI_channel
  #   lambda: |-
  #     return WiFi.channel();
  #   update_interval: 60s

  # - platform: template
  #   id: remote_battery_voltage
  #   accuracy_decimals: 4
  #   unit_of_measurement: "V"
  #   name: "${systemName} remote battery_voltage"
  #   state_class: "measurement"
  # - platform: template
  #   name: "${systemName} remote battery_level"
  #   id: remote_battery_level
  #   accuracy_decimals: 3 ## temp for deepsleep measurements accuracy
  #   unit_of_measurement: "%"
  #   state_class: "measurement"
  # - platform: template
  #   id: remote_cycle_counter
  #   name: "${systemName}.cycle_counter"
  #   accuracy_decimals: 0
  #   unit_of_measurement: "cycle"
  #   state_class: "measurement"
  # - platform: template
  #   id: remote_temperature
  #   name: "${systemName} remote temperature"
  #   unit_of_measurement: "Â°C"
  #   state_class: "measurement"
  # - platform: template
  #   id: remote_cycletime
  #   name: "${systemName} remote cycle time"
  #   unit_of_measurement: "ms"
  #   state_class: "measurement"

  # - platform: template
  #   id: remote_starting_battery
  #   name: "${systemName}.starting_battery"
  #   accuracy_decimals: 3
  #   unit_of_measurement: "%"
  #   # should add a self-restoring global
  # - platform: template
  #   id: remote_starting_timestamp
  #   name: "${systemName} remote starting_timestamp"
  #   unit_of_measurement: "s"
  #   # should add a self-restoring global
  # - platform: template
  #   # will not be precise as esphome stores this as a float
  #   id: lastupdate_ts
  #   name: ${systemName}.Last Update Timestamp
  #   # update_interval: 10s
  #   # accuracy_decimals: 0
  #   unit_of_measurement: "s"

text_sensor:
  #   - platform: wifi_info
  #     ip_address:
  #       name: "${systemName} WiFi IP Address"
  #       id: ip_address
  #       internal: true
  #       on_value:
  #         then:
  #           - logger.log:
  #               format: "IP address %s received for MAC address %s on channel %d."
  #               args: ["x.c_str()", "WiFi.macAddress().c_str()", "WiFi.channel()"]
  #               level: INFO
  - platform: template
    id: lastupdate
    name: ${systemName}.Last Update
    # update_interval: 10s
